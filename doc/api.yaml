openapi: 3.0.0
paths:
  /album:
    post:
      operationId: AlbumsController_create
      summary: Add new album
      description: Add new album information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        "201":
          description: Album is created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumEntity"
        "400":
          description: Bad request. Body does not contain required fields
      tags: &a1
        - Album
      security: &a2
        - bearer: []
    get:
      operationId: AlbumsController_findAll
      summary: Get albums list
      description: Gets all library albums list
      parameters: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AlbumEntity"
      tags: *a1
      security: *a2
  "/album/{id}":
    get:
      operationId: AlbumsController_findOne
      summary: Get single album by id
      description: Gets single album by id
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumEntity"
        "400":
          description: Bad request. albumId is invalid (not UUID)
        "404":
          description: Album was not found.
      tags: *a1
      security: *a2
    put:
      operationId: AlbumsController_update
      summary: Update album information
      description: Update library album information by UUID
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAlbumDto"
      responses:
        "200":
          description: The album has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumEntity"
        "400":
          description: Bad request. albumId is invalid (not UUID)
        "404":
          description: Album was not found.
      tags: *a1
      security: *a2
    delete:
      operationId: AlbumsController_remove
      summary: Delete album
      description: Delete album from library
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: Deleted successfully
        "400":
          description: Bad request. albumId is invalid (not UUID)
        "404":
          description: Album was not found.
      tags: *a1
      security: *a2
  /artist:
    post:
      operationId: ArtistsController_create
      summary: Add new artist
      description: Add new artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArtistEntity"
        "400":
          description: Bad request. Body does not contain required fields
      tags: &a3
        - Artist
      security: &a4
        - bearer: []
    get:
      operationId: ArtistsController_findAll
      summary: Get all artists
      description: Gets all artists
      parameters: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ArtistEntity"
      tags: *a3
      security: *a4
  "/artist/{id}":
    get:
      operationId: ArtistsController_findOne
      summary: Get single artist by id
      description: Get single artist by id
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistEntity"
        "400":
          description: Bad request. artistId is invalid (not UUID)
        "404":
          description: Artist was not found.
      tags: *a3
      security: *a4
    put:
      operationId: ArtistsController_update
      summary: Update artist information
      description: Update artist information by UUID
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateArtistDto"
      responses:
        "200":
          description: The artist has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistEntity"
        "400":
          description: Bad request. artistId is invalid (not UUID)
        "404":
          description: Artist was not found.
      tags: *a3
      security: *a4
    delete:
      operationId: ArtistsController_remove
      summary: Delete artist
      description: Delete artist from library
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: Deleted successfully
        "400":
          description: Bad request. artistId is invalid (not UUID)
        "404":
          description: Artist was not found.
      tags: *a3
      security: *a4
  /favs:
    get:
      operationId: FavoritesController_findAll
      summary: Get all favorites
      description: Gets all favorite movies, tracks, and books
      parameters: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FavoriteEntity"
      tags: &a5
        - Favorites
      security: &a6
        - bearer: []
  "/favs/track/{id}":
    post:
      operationId: FavoritesController_createFavoriteTrack
      summary: Add track to the favorites
      description: Add track to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: Added successfully
        "400":
          description: Bad request. trackId is invalid (not UUID)
        "404":
          description: Track with id doesn't exist
        "422":
          description: Track already exists in favorites or could not be added
      tags: *a5
      security: *a6
    delete:
      operationId: FavoritesController_removeFavoriteTrack
      summary: Delete track from favorites
      description: Delete track from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Deleted successfully
        "400":
          description: Bad request. trackId is invalid (not UUID)
        "404":
          description: Track was not found
      tags: *a5
      security: *a6
  "/favs/album/{id}":
    post:
      operationId: FavoritesController_createFavoriteAlbum
      summary: Add album to the favorites
      description: Add album to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: Added successfully
        "400":
          description: Bad request. albumId is invalid (not UUID)
        "404":
          description: Album with id doesn't exist
        "422":
          description: Album already exists in favorites or could not be added
      tags: *a5
      security: *a6
    delete:
      operationId: FavoritesController_removeFavoriteAlbum
      summary: Delete album from favorites
      description: Delete album from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Deleted successfully
        "400":
          description: Bad request. albumId is invalid (not UUID)
        "404":
          description: Album was not found
      tags: *a5
      security: *a6
  "/favs/artist/{id}":
    post:
      operationId: FavoritesController_createFavoriteArtist
      summary: Add artist to the favorites
      description: Add artist to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: Added successfully
        "400":
          description: Bad request. artistId is invalid (not UUID)
        "404":
          description: Artist with id doesn't exist
        "422":
          description: Artist already exists in favorites or could not be added
      tags: *a5
      security: *a6
    delete:
      operationId: FavoritesController_removeFavoriteArtist
      summary: Delete artist from favorites
      description: Delete artist from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "400":
          description: Bad request. artistId is invalid (not UUID)
        "404":
          description: Artist was not found
      tags: *a5
      security: *a6
  /track:
    post:
      operationId: TracksController_create
      summary: Add new track
      description: Add new track information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrackEntity"
        "400":
          description: Bad request. Body does not contain required fields
      tags: &a7
        - Track
      security: &a8
        - bearer: []
    get:
      operationId: TracksController_findAll
      summary: Get tracks list
      description: Gets all library tracks list
      parameters: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TrackEntity"
      tags: *a7
      security: *a8
  "/track/{id}":
    get:
      operationId: TracksController_findOne
      summary: Get single track by id
      description: Gets single track by id
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrackEntity"
        "400":
          description: Bad request. trackId is invalid (not UUID)
        "404":
          description: Track was not found.
      tags: *a7
      security: *a8
    put:
      operationId: TracksController_update
      summary: Update track information
      description: Update library track information by UUID
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTrackDto"
      responses:
        "200":
          description: The track has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrackEntity"
        "400":
          description: Bad request. trackId is invalid (not UUID)
        "404":
          description: Track was not found.
      tags: *a7
      security: *a8
    delete:
      operationId: TracksController_remove
      summary: Delete track
      description: Delete track from library
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: Deleted successfully
        "400":
          description: Bad request. trackId is invalid (not UUID)
        "404":
          description: Track was not found.
      tags: *a7
      security: *a8
  /user:
    post:
      operationId: UsersController_create
      summary: Create user
      description: Creates a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: The user has been created.
        "400":
          description: Bad request. Body does not contain required fields
      tags: &a9
        - Users
      security: &a10
        - bearer: []
    get:
      operationId: UsersController_findAll
      summary: Get all users
      description: Gets all users
      parameters: []
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserEntity"
      tags: *a9
      security: *a10
  "/user/{userId}":
    get:
      operationId: UsersController_findOne
      summary: Get single user by id
      description: Get single user by id
      parameters:
        - name: userId
          required: true
          in: path
          description: User ID
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: Bad request. userId is invalid (not UUID)
        "404":
          description: User not found
      tags: *a9
      security: *a10
    put:
      operationId: UsersController_update
      summary: Update a user's password
      description: Updates a user's password by ID
      parameters:
        - name: userId
          required: true
          in: path
          description: User ID
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
      responses:
        "200":
          description: The user has been updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEntity"
        "400":
          description: Bad request. userId is invalid (not UUID)
        "403":
          description: oldPassword is wrong
        "404":
          description: User not found
      tags: *a9
      security: *a10
    delete:
      operationId: UsersController_remove
      summary: Delete user
      description: Deletes user by ID
      parameters:
        - name: userId
          required: true
          in: path
          description: User ID
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: The user has been deleted
        "400":
          description: Bad request. userId is invalid (not UUID)
        "404":
          description: User not found
      tags: *a9
      security: *a10
  /auth/signup:
    post:
      operationId: AuthController_signUp
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthDto"
      responses:
        "201":
          description: ""
      tags: &a11
        - Auth
  /auth/login:
    post:
      operationId: AuthController_signIn
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthDto"
      responses:
        "200":
          description: ""
      tags: *a11
info:
  title: The Home Library
  description: Home Library basic REST API
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Innuendo
        year:
          type: number
          example: "1991"
        artistId:
          type: string
          nullable: true
          format: UUID
      required:
        - name
        - year
        - artistId
    AlbumEntity:
      type: object
      properties:
        id:
          type: string
          format: UUID
        name:
          type: string
        artistId:
          type: string
          nullable: true
        year:
          type: number
      required:
        - id
        - name
        - artistId
        - year
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Innuendo
        year:
          type: number
          example: "1991"
        artistId:
          type: string
          nullable: true
          format: UUID
      required:
        - name
        - year
        - artistId
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: "true"
      required:
        - name
        - grammy
    ArtistEntity:
      type: object
      properties:
        id:
          type: string
          format: UUID
        name:
          type: string
        grammy:
          type: boolean
      required:
        - id
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: "true"
      required:
        - name
        - grammy
    TrackEntity:
      type: object
      properties:
        id:
          type: string
          format: UUID
        name:
          type: string
        artistId:
          type: string
          nullable: true
          format: UUID
        albumId:
          type: string
          nullable: true
          format: UUID
        duration:
          type: number
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    FavoriteEntity:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: "#/components/schemas/ArtistEntity"
        albums:
          type: array
          items:
            $ref: "#/components/schemas/AlbumEntity"
        tracks:
          type: array
          items:
            $ref: "#/components/schemas/TrackEntity"
      required:
        - artists
        - albums
        - tracks
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          nullable: true
          format: UUID
        albumId:
          type: string
          nullable: true
          format: UUID
        duration:
          type: number
          example: "262"
      required:
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          nullable: true
          format: UUID
        albumId:
          type: string
          nullable: true
          format: UUID
        duration:
          type: number
          example: "262"
      required:
        - name
        - artistId
        - albumId
        - duration
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: TestUser
        password:
          type: string
          example: password
      required:
        - login
        - password
    UserEntity:
      type: object
      properties:
        id:
          type: string
          format: UUID
        login:
          type: string
        version:
          type: number
        createdAt:
          type: number
        updatedAt:
          type: number
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: password
        newPassword:
          type: string
          example: newpassword
      required:
        - oldPassword
        - newPassword
    AuthDto:
      type: object
      properties:
        login:
          type: string
          example: TestUser
        password:
          type: string
          example: password
      required:
        - login
        - password
